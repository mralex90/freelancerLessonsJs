// Логические операторы

// Оператор  (ИЛИ)

/*
Оператор ИЛИ, записывается как две вертикальные черты.
Процесс его работы следующий:
1.  Вычисляет операнды слева на право.
2.  Каждый операнд конвертирует в логическое значение.
    Если результат будет (true), останавливается и возвращает
    исходное значение этого операнда.
3.  Если операнды являются ложными (false), возвращает значение 
    последнего из них.
*/

// Булевы значения
console.log(true || true);
console.log(false || true);
console.log(true || false);
console.log(false || false);


// Разные типы

// Первый true это 1
console.log(1 || 0);

// Превый (true) это (true)
console.log(true || 'Aleks');
// Первый true это 58
console.log(null || 58);
// Первый true это Aleksndr 
console.log(null || 'Aleksandr' || 0);
// (true) нет совсем, вернет последнее значение - 0
console.log(undefined || '' || null || 0);

//  Присвоение значения в переменную

let userName = '';
let userNickName = 'Aleksandr';

let user = userName || userNickName || "Nameless";
console.log(user);


// Сокращенное вычисление. Условие.
let admins = 0;
let users = 5;
admins > users || users++;
console.log(users);


////////  Оператор && (И)
/*
Следующий логический оператор - это И. Пишется как два
амперсанда && выполняет следующие действия:
1.  Вычисляет операнды слева направо.
2.  Каждый операнд преобразует в логическое значение.
    Если результат (fasle), останавливается и возвращает исходдное 
    значение этого операнда.
3. Если все операнды были истинными, возвращает значение последнего.
*/

// Булевы значения
// console.log(true && true);
// console.log(fasle && true);
// console.log(true && fasle);
// console.log(fasle && fasle);


// Разные типы

//Пример 1. 0 - false
console.log('Aleksandr' && 0 && 2 && 3);
// Пример 2. null - false
console.log(1 && 2 && null && 3);
// Пример 3. All true
console.log('15' && '42');


////////// ПРИОРИТЕТ && БОЛЬШЕ ЧЕМ ||
console.log(1 && 0 || 2 && 1);
//console.log(0 - false || 1 - true); выведется 1


// Подобные условия
let users1 = 1;
(users1 > 0) && console.log(`Пользователей ${users1}`);
//(1 > 0 это true)переходим ко 2муоперанду && и собственно его и выводим
// Но если первое выражение будет false (0),ничего не выведется потому что процесс будет остановлен на первом операнде



////////// Оператор ! (НЕ) 

/*
Записывается как ! перед операндом, выполняет след. действия:
1. Сначала приводит аргумент к логическому типу true / false.
2. Затем возвращает противоположное значение.
*/

// Булево значение
// console.log(!true);

// Разные типы
console.log(!null);
console.log(!1);
console.log(!'');
console.log(!'Aleks');

/* 
Приоритет НЕ ! является наивысшим из всех логических операторов,
поэтому он всегда выполняется первым, перед && или ||/
*/
console.log(!true && 58 || 18 && !1);/*
Вначале выполнится оператор НЕ( тру станет фалс, а 1 станет 0. Т.е. фалс и фалс.)
Потом выполнится оператор И. первое выражение будет фалс, второе тоже будет фалс.
и потом выполнится оператор ИЛИ.*/

// Иногда двойной оператор !! используют для преобразования в булевый тип
console.log(!!'Alesk');
//или
console.log(Boolean('Aleks'));



/////// Оператор обьединения с null

/*
Оператор ?? возвращает первый аргумент,
если он не null / undefined, иначе второй.
*/
let name;
console.log(name ?? "Nameless");/*
так как переменная не обьявлена, она вернет undefined.
В результате этого выражения мы получим именно второй операнд.
Но стоит определить переменную(задать ей значение), как именно это значение мы и получим.
