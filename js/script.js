
// События загрузки страницы


// Событие beforeunload срабатывает на обьекте window
window.addEventListener("beforeunload", beforeUnLoad);

function beforeUnLoad(event) {
    // Отмените событик, как указано в стандарте.
    event.preventDefault();
    // Chrome требует установнки возвратного значения. 
    event.returnValue = '';
}
/*
Мы можем отловить событие в момент, когда пользователь собирается покинуть нашу страницу.
"beforeunload" сработает на обьекте window и в нашем примере, при возникновении этого события, 
запускаем функцию beforeUnLoad. Что нам нужно тут понимать?
Во-первых, нам нужно отменить стандатное поведение браузера, то есть использовать 
preventDefault, а также в частности, для ХРОМА вернуть пустое значение свойства returnValue,
как минимум пустое - иначе ничего не сработает.
В итоге мы что-нибудб на странице меняем, достаточно выделить какой-то текст и попробовать 
перезагрузить странцу. М ы получим окно с предупрехдением что есть какие-то несохраненные 
данные, что подумай точно ли нужно закрыть/перезагрузить страницу.
И вот такой подход может быть очень удобным - особенно на странице, где форма какая-то большая 
и пользователь долго набирал какие-то данные, а потом случайно нажал ОБНОВИТЬ и все пропало.
Так вот таким предупреждением мы можем его встряхнуть и переспросить о обновлении.  
*/


// Событие unload срабатывает на обьекте window
window.addEventListener("unload", function (e) {
    // 
    // navigator.sendBeacon(url, data)
    // https://w3c.github.io/beacon.
});
/*
Событие unload довольно тонкая штука, т.е. пользователь уже ушел с нашей страницы, 
но, как бы в фоновом режиме, мы можем заставить браузер выполнить еще какие-то действия.
Например, это используется для передачи некой статистики и т.д.
Более подробно можно ознакомиться по ссылке
*/

