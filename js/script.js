
// Всплытие и погружение
const block = document.querySelector('.block');
const blockInner = document.querySelector('.block__inner');
const blockInnerInner = document.querySelector('.block__inner-inner');

/*
Всплытие
Когда на элементе происходит событие, обработчики сначала 
срабатываюют на нем, потом на его родителе, затем выше и 
так далее, вверх по цепочке предков.
*/

/*
Погружение 
Для ттого чтобы что-то всплыло, оно должно сначала погрузиться
*/

block.addEventListener("click", function (event) {
    console.log('Клик на Блок!');
    // console.log(event.target);
});
blockInner.addEventListener("click", function (event) {
    console.log('Клик на Блок второго уровня!');
}, "capture": true);
blockInnerInner.addEventListener("click", function (event) {
    console.log('Клик на Блок третьего уровня!');
    //Остановка всплытия
    // event.stopPropagation();
});

/*
Процесс происходит следующим образом:
Сначала события погружаются вниз, а потом начинают всплывать, и мы можем 
отловить это самое погружение, например, с помощью свойства для "addEventListener" 
- "capture".
То есть к событию второго уровня, мы добавим параметр "capture": true.
Теперь кликаем на блоке 3го уровня и видим следующее:
сначала мы видим результат выполнения обработчика событий второго уровня, 
потом третьего, а потом первого.
Что произошло? В момент погружения, с помощью параметра "capture": true, момент 
погружения мы отловили обработчик второго уровня, вывели его в консоль.
Далее мы погрузились до блока 3го уровня, сработал обработчик и мы начали всплывать 
и дошли до блока первого уровня.

Напоминание!
Если мы изменим true на false порядок будет совершенно другой, т.е. в момент 
погружения мы ничего не отлавливали и начали ввсплывать. Блок 3го уровня, 2го уровня, 
1го уровня.

В современной разработке стадия погружения используется очень редко, 
обычно события обрабатываются во время всплытия.
*/