// Функция-конструктор

/*
Обычный синтаксис создания обьекта{... } позвволяет создать только 
один обьект. Но зачастую нам нужно создать множество однотипных обьектов, 
таких как пользователи, элементы меню и т.д.
Это можно сделать при помощи ф-ии-конструктора и оператора "new"
*/
/*
Функции-конструкторы являются обычными функциями. Но есть 2 правила:
1) Имя функции-конструктора должно начинаться с большой буквы.
2) Функция-конструктор должна вызываться при помощи оператора "new".
*/
function UserInfo(name) {

    // this = {}; Создается пустой обьект (неявно)

    this.name = name;
    this.age = 30;

    // return this; Возвращается обьект (неявно)

}

console.log(new UserInfo('Oleks'));
console.log(new UserInfo('Maria'));

/*
Из примера:
У нас есть ф-ия "UserInfo", ее имя начинается с большой буквы(функция конструктор),
передаем туда параметр "name" и дальше интересная запись:
используем "this", далее имя будущего свойства в обьекте, и его значение. В первом случае 
получаемое значение, а во 2м - конкретное (30).
Что происходит на самом деле: 
Во-первых "this" будет создавать пустой обьект, но этого мы не видим и не пишем, это 
происходит автоматически. И после создания свойств в этом обьекте у нас будет "return", т.е. 
будет возвращаться ф-ия, сразу будет возвращать этот обьект. Опять же мы этого не пишем, это 
будет выполнятся автоматически. И теперь посмотрим как же работать с этим конструктором.  
Допустим в консоль хотим вывести наш новый обьект - пишем оператор "new", далее вызываем функцию 
"UserInfo", передаем туда имя (name). В итоге получаем новый обьект в котором есть два свойства (name & age).
И "name" значения свойства "name" будет именно то мы туда передали.
И тут же мы хотим создать другой обьект, такой же, но с дугим именем, то  делаем тоже самое, передаем другое имя(нужное)
и создается новый обьект с нашими новыми значениями.

Естественно, можно "return" писать явно и возвращать именно то, что нам нужно возвращать, а не автоматически весь обьект, 
Естественно, мы можем передавать сюда больше любых параметров, все то же самое, 
что и в обычной ф-ии, но с некоторыми соглашениями.
*/