// Работа со строками 

// Изменение строки

let text = "Hello!";
text[6] = ".";
console.log(text);
/*
При всем этом мы не можем поменять какой-то конкретный символ строки 
используя его позицию
*/

/////// Изменение регистра 

let text1 = "Hello!";
console.log(text1.toUpperCase());
console.log(text1.toLowerCase());
/*
У нас есть переменная "text1", ей присвоена строка, причем только первая буква 
переменной в верхнем регистре, а все остальные в нижнем.
Если мы хотим изменить строку и вывести ее в верхнем регистре, то нам нужно 
использовать "toUpperCase". Для этого пишем нашу переменную, ставим точку, 
пишем "toUpperCase()" и получаем всю строку в верхнем регистре.
Если мы хотим всю строку изменить, чтобы вывести ее в нижнем регистре - используем, 
соответственно, "toLowerCase".
*/


////////  Поиск подстроки

/*   Метод str.indexOf(substr, pos)

Он ищет подстроку "substr" в строке "str", начиная с позиции "pos", и 
возвращает позицию, на которой располагается совпадение, либо -1 при 
отсутсвии совпадений. 
*/

let text2 = "Hello!";
console.log(text2.indexOf('ell'));
console.log(text2.indexOf('ell', 3));
/*
У нас есть text2 = "Hello!", дальше мы в ней хотим найти подстроку "ell".
Для этого пишем нашу переменную, ставим точку, пишем indexOf и внутри 
круглых скобок, в кавычках, пишем част строки, которую нужно найти.
В итоге получаем позицию совпадения, т.е. "ell" у нас находится начиная с 
первой позиции.
Теперь нужно искать тот же "ell", в той же строке, но начиная с 3й позиции.
Естественно, таких совпадений здесь не будет и мы получаем -1.
Совпадения не найдены.
*/


//////////// 

/* Методы includes, startsWith, endsWith

Более современный метод "str.includes(substr, pos)" возвращает "true", если 
в строке есть искомая подстрока, либо "", если нет.
*/
let text3 = "Hello!";
console.log(text3.includes('ell'));
console.log(text3.includes('ell', 3));

console.log(text3.startsWith('ell'));
console.log(text3.endsWith('!'));
/*
В примере у нас та же сторка "Hello!", и с помощью "includes" мы ищем "ell".
Получаем "тру" если найдено и получаем "фолс", если нет.
"startsWith, endsWith" - эти ф-ии ищут подстроку (совпадение) необходимую, 
в начале и в конце строки соответственно. 

При чем нужно помнить, что регистр имеет значение, и если мы будем в строке искать какую-то строку 
чьи регистры не будут совпадать, то в таком случае стоит использовать, допустим, "lowerCase" и для 
строки (т.е. мы сначала переменную, которрая содержит строку переводим в нижний регист, потом "includes" 
и ищем что-то тоже переведа в нижний регистр).
Таким образом мы получим "тру", потому что здесь мы ищем подстроку, находящуюся в нижнем регистре, 
в строке, которая тоже находится в том же регистре. Поэтому такое выражение тоже может быть полезным. 
*/

/*
В итоге "indexOf" стоит использовать тогда, когда нам нужна позиция найденой 
подстроки (когда нужно получить позицию искомого текста).
В остальных случаях удобнее использовать "includes"
*/