
// Основы событий мыши

// Наведение мыши: mouseover/out, mouseenter/leave

// Делегирование событий наведения мыши

/*
НО! Естественно есть одно но, а именно преимущество у "mouseover/out".
(Это те события, которые всплывают). Речь идет о делегировании.
Делегироване - очень крутая вещь, она в свою очередь снижает нагрузку на браузер 
из-за того, что нам нет необходимости навешивать много событий на каждый 
элемент.
В примере ситуация, когда внутри условного квадрата есть девять ячеек, 
и мы хотим, чтобы при наведении на каждую ячейку менялся цвет фона.
Так вот, если бы мы использовали "mouseenter/leave" нам бы пришлось опять 
использовать циклы и навешивать это событие на каждую ячейку. Почему? 
Потому, что "mouseenter/leave" не всплывают, в отличии от "mouseover/out".

Что же мы можем сделать в этом случае? 
Мы можем навешать событие на родителя, на сам квадрат, и, поскольку, "mouseover/out" 
всплывают, мы можем отслеживать саму ячейку(просеивать).
Здесь мы обьявляем переменую "target" и туда пытаемся получить "span", потому что 
внутри нашего обьекта эти ячейки реализованы с помощью тега "span".
Если наведение курсора сейчас не на "span", тогда мы ничего не делаем, но если на "span", 
то выполняем некоторые действия - а именно добавляем "background-color".
Тоже самое происходит когда мы курсор убираем.
В итоге, таким образом водим по ячейкам и при выполнении условий - все отлично работает, 
при этом обработчик навешен только один (mouseover) - на родителя, и "mouseout" тоже только один. 
*/

const blockForMouse = document.querySelector('.block-for-mouse');
blockForMouse.addEventListener("mouseover", function (event) {
    let target = event.target.closest('span');
    // переход не на <span> - игнорировать
    if (!target) return;
    target.style.cssText = `background-color: #77608d;`;
});
blockForMouse.addEventListener("mouseout", function (event) {
    let target = event.target.closest('span');
    // переход не на <span> игнорировать
    if (!target) return;
    target.style.cssText = ``;
});

//////////////////
/*
Если мы заменим событие на на "mouseenter" и "mouseleave" вся красота у нас работать 
не будет, так как мы знаем, что используя эти события при переходе на дочерние 
обьекты он не считаются и не учитываются, ничего не всплывает, соответственно делегирование 
мы применить не сможем.
Вот, в зависимости от конкретной задачи, мы можем применить или пару "mouseover/mouseout" 
или пару "mouseenter / mouseleave".
*/