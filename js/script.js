// parseInt & parsrFloat

/*
Как мы уже знаем, преобразить строку в число можно с помощью 
унарного оператора сложения либо специальной ф-ии Number
*/

let valueOne = +"150";
console.log(valueOne);
console.log(typeof valueOne);
/* Например, есть строка 150, используем унарный оператор "+", получаем 
число 150 и тип данных number.*/

//Но мы очень часто сталкиваемся со значениями у которых есть единица измерения, например

let valueTwo = +"150px";
console.log(valueTwo);
console.log(typeof valueTwo);
/* Посмотрим на следующий пример.
Есть строка "150px" и попытка преобразовать ее в число вернет "NaN", тип данных - number.
И фактически 150 мы так и не получим.
*/

///////////

/*
Так вот для получения чисел из подобных строк существует parseInt и parseFloat.
если в процессе чтения такой строки возникает ошибка, то вощвращается число полученное 
до возникновения ошибки. При этом ф-ия "parseInt" возвращает целое число, а "parseFloat" 
возвращает число с плавающей точкой.*/

let value1 = parseInt("150.58px");
console.log(value1);
console.log(typeof value1);

let value2 = parseFloat("150/58px");
console.log(value2);
console.log(typeof value2);

/* Напоминание! если же первым символом строки будет не число, т.е. сразу возникнет ошибка, 
то вернется NaN, т.к. никакого числа из этой строки мы достать так и не смогли */

let value3 = parseFloat("a150.58px");
console.log(value3);
console.log(typeof value3);

//////

/*
Функция parseInt() имеет необязательный второй параметр. Он определяет 
систему счисления, таким образом parseInt может читать строки с шеснадцатеричными 
числами, двоичными числами и т.д.

В этом примере с помощью "parseInt" мы считываем шестнадцатеричные числа, при чеи 
"0х" можно не писать.
*/

console.log(parseInt('0xff, 16'));
console.log(parseInt('ff, 16'));