
// Делегирование событий

const menuBody = document.querySelector('.menu');

document.addEventListener("click", menu);

function menu(event) {
    if(event.target.closest('.menu__button')) {
        menuBody.classList.toggle('_active');
    }
    if(!event.target.closest('.menu')){
        menuBody.classList.remove('_active');
    }
}
/*
Для начала в константу "menuBody" присваиваем общий обьект ".menu" - родитель 
всего этого нашего действа. Далее на документ ("document") вешаем вешаем событие 
"addEventListener", событие "click" и, собственно, при возникновении этого события 
мы вызываем функцию "menu".
Первым делом здесь мы отлавливаем, просеиваем все и отлавливаем момент, когда нажали 
на вот эту кнопку, то есть на обьект с классом "menu__button", либо на вложеный в него 
обьект. А мы знаем, чтотам есть "span"ы, поэтому это важно.
И если мы нажали именно на такой обьект - мы собственно добавляем либо убираем 
класс "_active" с помощью "toggle". Соответственно, по этому классу у нас там 
меняется показ "span"а, или первого или второго.

Возникает вопрос - почему не меняем слова через ДЖС??
Ответ - намного проще потом в последствии когда верстка интегрируется на какой-то 
движок, выводить здесь языковые переменные, таким образом можно очень легко менять, 
например, язык когда у нас многоязыковой сайт. Если мы зашьем это все в ДЖС - это будет 
сделать сложнее. Но речь не об этом, а о том как же нам закрыть меню после того, как 
кликнули вне него.
Для этого мы делаем еще одну проверку - мы проверяем, кликнули мы на какой-то обьект 
который находится внутри общего обьекта с классом "menu".
Если нет - тогда мы отбираем класс у нашего обьекта и поскольку класса нет, меню у нас 
закроется.

Может возникнуть вопрос - правильно ли вешать событие на весь документ, ведь если даже кликнем 
вне обьекта, у на сбудет вызываться вот эта функция меню?
Да, верно, выглядит оно странно, но если сравнивать с цыклами и сравнивать с навешиванием 
обработчика на множество обьектов - то это детский лепет)
И если есть какой-то напряг браузера, то он настолько минимальный, что он практически не 
учитывается.
По этому с делегированием все очень хорошо.
*/