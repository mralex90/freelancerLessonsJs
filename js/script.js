// Инкремент/Декремент

// Инкремент ++
let addUser = 2;
addUser++;
console.log(addUser);
/*
Работает так же как и 
addUser = addUser + 1;
или
addUser += 1;
*/

// Декремент
let removeUser = 2;
removeUser--;
console.log(removeUser);

/* Инкремент/Декремент можно применить только к переменной.
Попытка использовать его на значении, типа 5++, приведет к ошибке.
*/
// console.log(5++);

// ++ и -- могут быть расположены не только после, но и до переменной.

// Постфиксная форма
// let userCounter = 0;
// let newUser = userCounter++;
// console.log(newUser);

// Префиксная форма
let userCounter = 0;
let newUser = ++userCounter;
console.log(newUser);

/* Итого, если результат оператора не используется, а нужно только
увеличить / уменьшить переменную, тогда без разницы, 
какую форму использовать.

Если нужно тут же использовать результат,
то нужно использовать префиксную форму.

А если нужно увеличить и при этом получить значение переменной 
ДО увелиличения - нужна постфиксная форма
*/

/*
Инкремент/Декремент можно использовать в любых выражениях.
При этом их приоритет будет выше, чем у большинства арифметических операций
*/
// let userCounter1 = 0;
// let newUsers1 = 2 * ++userCounter1;
// console.log(newUsers1);

// Отдельная запись более читабельна:

// let userCounter1 = 0;
// ++userCounter1;
// let newUsers1 = 2 * userCounter1;
// console.log(newUsers1);


// Оператор запятая

/*
Предоставляет возможность вычислять несколько выражений, 
разделяя их запятой ,. Каждое выражение выполняется, но
возвращается результат только последнего.
*/
let userCounter1 = (8 + 2, 19 + 1);
console.log(userCounter1);


//  Побитовые операторы работают с 32х-разрядными числами, использ. очень редко ( например в криптографии).

/*
AND(и) ( & )
OR(или) ( | )
XOR(побитое исключающее или) ( ^ )
NOT(не) ( ~ )
LEFT SHIFT(левый сдвиг) ( << )
RIGHT SHIFT(правый сдвиг) ( >> )
ZERO-FILL RIGHT SHIFT(ПРАВЫЙ СДВИГ С ЗАПОЛНЕНИЕМ НУЛЯМИ) ( >>>)
*/