
// Делегирование событий

/*
Всплытие и перезват событий позволяет реализовать один из 
самых важных приемов разработки - делегирование.
*/

const button = document.querySelectorAll('.button');

function showConsole() {
    console.log('HEY!');
}
button.forEach(buttonItem => {
    buttonItem.addEventListener("click", showConsole);
});
/*
Дело в том, что всплытие и перехват событий позволяют нам реализовать 
один из самвх важных приемов разработки - делегирование. 
Посмотрим на пример: 
Сейчас у нас не одна кнопка, а несколько (некое множество).
И мы хотим, чтобы при клике на каждую у нас выполнялся один и тот же код, 
например, в консоли была выведена строка 'HEY!'. Как же нам это сделать? 
Для начала в константу "button" мы уже должны получить не одну кнопку, а 
целую коллекцию, т.е. все кнопки с классом "button". Для этого мы используем 
"querySelectorAll".
Теперь мы должны пробежаться по каждой из них и каждой навесить обработчик, 
для этого мы используем цикл, скажем, "forEach", и собственно каждому элементу 
присваиваем "addEventListener" и так далее и так далее.
И таким образом мы нашу задачу решаем. Теперь при клике на каждую из кнопок 
у нас срабатывает нужный нам код. 

Но в чем же проблемма????
Проблема в оптимизации!!! Навешивание этой прослушки и детектора слегка напрягает 
браузер, а тут у нас навешивание на сразу множество обьектов. Это сейчас их 4, но их 
может быть 400, или 4000, или 40000 и т.д.

Так вот, делегирование позволяет избежать навешивания такого огромного количества 
обработчиков.
*/