// Проверка существования свойства

let userInfo = {
    name: "Alex",
    age: 30,
}
console.log(userInfo.age);

if (userInfo.age) { // true или false
    console.log(userInfo.age);
}

/*
У нас есть обьект и мы выводим в консоль значение одого из звойств.
Но, если мы уберем из обьекта это свойство, то мы получим undefined.
Чтобы проверить нпличие обьекта пишем:
if (userInfo.age) - мы знаем, что в данном случае вернется ФОЛС, если 
значение будет существовать - то вернется ТРУ.
Если оно будет существовать - мы выведем его в консоль.
*/

let userInfo1 = {
    name: "Oleks",
    age: 30,
    // address: {
    //     city: "Kharkiv",
    //     street: "123",
    // }
}
// console.log(userInfo1.address.street);
console.log(userInfo1?.address?.street);


/*   Опциональная цепочка

У нас есть обьект, внутри которого тоже есть обьект. Мы хотим получить 
конечное значение (улицу). Мы обращаемся к обьекту, далее к обьекту 
внутри обьекта (к адресу) и уже потом к конкретному свойству и получаем 
его значение.
Сейчас все ОК, но если свойства нет вообще? - получим прям ошибку.
Чтобы этого не происходило существует синтаксис опциональная цепочка с 
помощью оператора "?.".
Мы эту строку запишем так: каждый раз будет проверяться наличие данного свойства 
и вместо ошибки мы получим ubdefined, и теперь мы можем использовать 
эту запись в дальнейших прооверках, опять же, с помощью условного ветвления.

*/